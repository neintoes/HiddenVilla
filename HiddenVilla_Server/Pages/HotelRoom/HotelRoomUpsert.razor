@page "/hotel-room/create"
@page "/hotel-room/edit/{HotelRoomId:int}"
@using Models;
@using Business.Repository
@using Business.Repository.IRepoosiory
@using System.IO
@using Service.IService
@*So what's happening here is I'm declaring a variable of a type of the interface?? and that's actually the name of the variable next to it
NOT an actual reference to he HotelRoomRespository class.*@
@inject IHotelRoomRepository hotelRoomRepository
@inject IHotelRoomImageRepository hotelRoomImageRepository
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject IFileUpload FileUpload

    <div class="row mt-2 mb-5">
        <h3 class="card-title text-info mb-3 ml-3">@title Hotel Room</h3>
        <div class="col-md-12">
            <div class="card">
                <div class="card-body">
                    <EditForm Model="@roomModel" OnValidSubmit="HandleHotelRoomUpsert">
                        <DataAnnotationsValidator/>
                        <div class="form-group">
                            <label>Room Name:</label>
                            <InputText @bind-Value="roomModel.Name"></InputText>
                            <ValidationMessage For="() =>roomModel.Name"/>
                        </div>
                        <div class="form-group">
                            <label>Room occupants:</label>
                            <InputNumber @bind-Value="roomModel.Occupancy"></InputNumber>
                            <ValidationMessage For="()=> roomModel.Occupancy"/>
                        </div>
                        <div class="form-group">
                            <label>Regular Nightly Rate:</label>
                            <InputNumber @bind-Value="roomModel.RegularRate"></InputNumber>
                            <ValidationMessage For="()=>roomModel.RegularRate"/>
                        </div>
                        <div class="form-group">
                            <label>Square footage:</label>
                            <InputText @bind-Value="roomModel.SqFt"></InputText>
                        </div>

@*                        <div class="form-group">
                            <label>Room Description:</label>
                            <InputTextArea @bind-Value="roomModel.Details"></InputTextArea>
                        </div>*@

                        <div class="form-group" style="height:250px;">
                            <label>Details></label>
                        <BlazoredTextEditor @ref="@QuillHtml" Placeholder="Please enter room details">
                            <ToolbarContent>
                                <select class="ql-header">
                                    <option selected=""></option>
                                    <option value="1"></option>
                                    <option value="2"></option>
                                    <option value="3"></option>
                                    <option value="4"></option>
                                    <option value="5"></option>
                                </select>
                                <span class="ql-formats">
                                    <button class="ql-bold"></button>
                                    <button class="ql-italic"></button>
                                    <button class="ql-underline"></button>
                                    <button class="ql-strike"></button>
                                </span>
                                <span class="ql-formats">
                                    <select class="ql-color"></select>
                                    <select class="ql-background"></select>
                                </span>
                                <span class="ql-formats">
                                    <button class="ql-list" value="ordered"></button>
                                    <button class="ql-list" value="bullet"></button>
                                </span>
                                <span class="ql-formats">
                                    <button class="ql-link"></button>
                                </span>
                            </ToolbarContent>
                            <EditorContent>
                                @((MarkupString)@preExistingDetailsHtml)
                            </EditorContent>
                        </BlazoredTextEditor>
                        </div>
                        <div class="form-group" style="padding-top:70px;">
                            <InputFile OnChange="HandleImageUpload" multiple></InputFile>
                            <div class="row">
                                @if (isImageUploadProcessStarted)
                                {
                                    <div class="d-flex justify-content-center mt-4">
                                        <div class="spinner-border text-info">

                                        </div>
                                    </div>
                                }
                                else
                                { 
                                    @if(roomModel.ImageUrls != null && roomModel.ImageUrls.Count >0)
                                    {
                                        int serial = 1;
                                        foreach(var roomImage in roomModel.ImageUrls)
                                        {
                                            <div class="col-md-2 mt-3">
                                                <div class="room-image" style="background : url('@roomImage') 50% 50%; ">
                                                    <span class = "room-image-title">@serial</span>
                                                </div>
                                        
                                                <button type="button" @onclick="()=>DeletePhoto(roomImage)" class="btn btn-outline-danger btn-block mt-4">
                                                    Delete
                                                </button>
                                            </div>
                                            serial++;
                                        }
                                    }
                                }
                            </div>
                        </div>
                        <div class="form-group">
                            <button class="btn btn-primary">@title Room</button>
                            <NavLink href="hotel-room" class="btn btn-secondary" @onclick="CreateToIndexPhotoDeletion">Back to Index</NavLink>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>

@code {
    [Parameter]
    public int? HotelRoomId { get; set; }

    private string title = "";
    private HotelRoomDTO roomModel = new HotelRoomDTO();
    //Not going to instantiate a new copy of HotelRoomImage until the file upload method.
    private HotelRoomImageDTO imageDTO = new HotelRoomImageDTO();
    private bool isImageUploadProcessStarted { get; set; } = false;
    BlazoredTextEditor QuillHtml;
    string quillHtmlContent;

    //Fix to infinite loop.
    string preExistingDetailsHtml{ get; set; }

    string preExistingHotelName;
    List<string> preExistingImageUrls = new List<string>();
    private List<string> imagesToBeDeleted = new List<string>();


    protected override async Task OnInitializedAsync()
    {
        if (HotelRoomId == null)
        {
            //method is create
            title = "Create";
        }
        else
        {
            //method is update
            title = "Edit";
            roomModel = await hotelRoomRepository.GetHotelRoom(HotelRoomId.Value);
            preExistingHotelName = roomModel.Name;
            preExistingDetailsHtml = roomModel.Details;
            //The code below ensures that images are not left in the RoomImages folder if the the hotel room is not created.
            roomModel.ImageUrls = new List<string>();
            if (roomModel.Images != null)
            {
                foreach (HotelRoomImageDTO image in roomModel.Images)
                {
                    roomModel.ImageUrls.Add(image.ImageUrl);
                    preExistingImageUrls.Add(image.ImageUrl);
                }
            }
        }
    }


    private async Task HandleHotelRoomUpsert()
    {
        try
        {
            //If the name of the hotel has been changed, then it will be checked to see if it is unique.
            //If it is not unique then the method will return.
            if(roomModel.Name != preExistingHotelName || preExistingHotelName == null)
            {
                var isRoomUnique = await hotelRoomRepository.IsHotelUnique(roomModel.Name);
                if (isRoomUnique != null)
                {
                    await ErrorPress("Uh Oh! It seems that Hotel room name is already taken.", "Please try naming it something else.");
                    return;
                }
            }

            if(HotelRoomId == null && title=="Create")
            {
                //Handling create form input
                Console.WriteLine("Submitting form.");
                roomModel.Details = await QuillHtml.GetHTML();
                var createdRoom = await hotelRoomRepository.CreateHotelRoom(roomModel);
                await AddHotelRoomImage(createdRoom);
                await SuccessPress("The newly created hotel room Id is: " + createdRoom.HotelRoomId);
                await SuccessPress($"{roomModel.Name} has been successfully entered into the system.");
            }
            else
            {
                //Handling update form input
                roomModel.Details = await QuillHtml.GetHTML();
                var updatedRoom = await hotelRoomRepository.UpdateHotelRoom(HotelRoomId.Value, roomModel);
                if(roomModel.ImageUrls != null && roomModel.ImageUrls.Any() || (imagesToBeDeleted != null && imagesToBeDeleted.Any()))
                {
                    foreach(var imageToBeDeletedUrl in imagesToBeDeleted)
                    {
                        var imageName = imageToBeDeletedUrl.Replace($"RoomImages/", "");
                        var result = FileUpload.DeleteFile(imageName);
                        await hotelRoomImageRepository.DeleteImageByImageUrl(imageToBeDeletedUrl);
                    }
                }
                await AddHotelRoomImage(updatedRoom);
                await SuccessPress($"{roomModel.Name} has been successfully updated in our system.");
            }
            NavigationManager.NavigateTo("hotel-room");

        }
        catch (Exception ex)
        {
            throw new Exception(ex.ToString());
        }
        //Check to see if the room name is already taken, and prompt the user if so. 

    }

    private async Task HandleImageUpload(InputFileChangeEventArgs e)
    {
        isImageUploadProcessStarted = true;
        try
        {
            var images = new List<string>();
            if(e.FileCount > 0)
            {
                foreach(var file in e.GetMultipleFiles())
                {
                    FileInfo fileInfo = new FileInfo(file.Name);
                    if(fileInfo.Extension.ToLower() == ".jpg" ||
                    fileInfo.Extension.ToLower() == ".png" ||
                    fileInfo.Extension.ToLower() == ".jpeg")
                    {
                        //Upload the image file and add the filePath to the local images list.
                        var uploadedImagePath = await FileUpload.UploadFile(file);
                        images.Add(uploadedImagePath);
                    }
                    else
                    {
                        //Image is of incorrect file extension, prompt user to upload another file.
                        await ErrorPress("Uh Oh! This file is of the incorrect type.", "Please upload a file ending in 'jpg','jpeg' or 'png'.");
                        return;
                    }
                }
                if (images.Any())
                //if any images have been uploaded..
                {
                    if(roomModel.ImageUrls != null && roomModel.ImageUrls.Any())
                    //if there are already image URLS contained in the HotelRoomDTO...
                    {
                        roomModel.ImageUrls.AddRange(images);
                    }
                    else
                    //else if there are none.
                    {
                        roomModel.ImageUrls = new List<string>();
                        roomModel.ImageUrls.AddRange(images);
                    }
                }
            }
        } 
        catch(Exception ex)
        {
            await ErrorPress(ex.ToString(), "failure");
            new Exception(ex.ToString());
        }
        isImageUploadProcessStarted = false;
    }

    private async Task AddHotelRoomImage(HotelRoomDTO createdRoom)
    {
        {
            if (title == "Create")
            {
                foreach (var imageUrl in roomModel.ImageUrls)
                {
                    imageDTO = new HotelRoomImageDTO()
                    {
                        HotelRoomId = createdRoom.HotelRoomId,
                        ImageUrl = imageUrl
                    };
                    await hotelRoomImageRepository.CreateHotelRoomImage(imageDTO);
                }
            }
            else
            {
                foreach (var imageUrl in roomModel.ImageUrls)
                {
                    if (roomModel.Images.Where(x => x.ImageUrl == imageUrl).Count() == 0)
                    {

                        imageDTO = new HotelRoomImageDTO()
                        {
                            HotelRoomId = createdRoom.HotelRoomId,
                            ImageUrl = imageUrl
                        };
                        await hotelRoomImageRepository.CreateHotelRoomImage(imageDTO);
                    }
                }   
            }
        }
    }

    internal async Task DeletePhoto(string imageUrl)
    {
        try
        {
            //finding and deleting the selected image from the RoomImages folder.
            var imageIndex = roomModel.ImageUrls.FindIndex(x => x == imageUrl);
            var imageName = imageUrl.Replace($"RoomImages/", "");

            //Handling method when on the create form
            if(roomModel.HotelRoomId == 0 && title == "Create")
            {
                var result = FileUpload.DeleteFile(imageName);
            }
            //Handling the method when on teh edit/update form.
            else
            {
                imagesToBeDeleted ??= new List<string>();
                imagesToBeDeleted.Add(imageUrl);
            }
            //This statement removes the images from the UI
            roomModel.ImageUrls.RemoveAt(imageIndex);
        } catch(Exception ex)
        {
            throw new Exception(ex.ToString());
        }
    }

    //Quill Methods
    public async void GetHTML()
    {
        quillHtmlContent = await this.QuillHtml.GetHTML();
        StateHasChanged();
    }

    public void SetHTML()
    {
        try
        {
            if (!string.IsNullOrEmpty(roomModel.Details))
            {
                this.QuillHtml.LoadHTMLContent(roomModel.Details);
                StateHasChanged();
            }
        } catch(Exception ex)
        {
            throw new Exception(ex.ToString());
        }
    }

    private void CreateToIndexPhotoDeletion()
    {
        if (title == "Create" && roomModel.ImageUrls != null)
        {
            foreach(var imageUrl in roomModel.ImageUrls)
            {
                var imageName = imageUrl.Replace($"RoomImages/", "");
                FileUpload.DeleteFile(imageName);
            }
        }
    }

    //JS button alerts.
    private async Task ErrorPress(string inputMessage, string inputMessageTwo)
    {
        await JSRuntime.SwalError(inputMessage, inputMessageTwo);
    }

    private async Task SuccessPress(string inputMessage)
    {
        await JSRuntime.ToastrSuccess(inputMessage);
    }
}
