@page "/blazorjs"
@using DataAccess.Data
@using Business.Repository
@using Business.Repository.IRepoosiory
@using Models
@using Service.IService
@inject IJSRuntime JSRuntime
@inject IFileUpload FileUpload
@inject IHotelRoomRepository HotelRoomRepository
@inject IHotelRoomImageRepository HotelRoomImageRepository

<h3>BlazorJS</h3>
<button class="btn btn-danger" @onclick="(()=>ErrorPress(message))">Danger Button</button>
<button class="btn btn-warning" @onclick="(()=>WarningPress(message))">Warning Button</button>
<button class="btn btn-success" @onclick ="(()=>SuccessPress(message))">Success Button</button>
@*CHANGE THE ONCLICK METHODS BELOW*@
<button class="btn btn-danger" @onclick="DropHotelRoomImageTable">Secret: Delete all hotel room images</button>
<button class="btn btn-danger" @onclick= "DropHotelRoomTable">Secret: Delete all hotel rooms</button>

@code {
    ApplicationDbContext _db;
    string message = "Suck on deez";
    string messageOne = "This is your first warning!";
    string messageTwo = "And this is your second warning!";

    private async Task ErrorPress(string message)
    {
        await JSRuntime.ToastrError(message);
    }

    private async Task WarningPress(string message)
    {
        await JSRuntime.ToastrWarning(message);
    }

    private async Task SuccessPress(string message)
    {
        await JSRuntime.ToastrSuccess(message);
    }

    private async Task SuccessSwal(string messageOne, string messageTwo)
    {
        await JSRuntime.SwalSuccess(messageOne, messageOne);
    }

    private async Task WarningSwal(string messageOne, string messageTwo){
        await JSRuntime.SwalWarning(messageOne, messageOne);
    }

    private async Task ErrorSwal(string messageOne, string messageTwo)
    {
        await JSRuntime.SwalError(messageOne, messageOne);
    }

    private async Task DropHotelRoomTable()
    {
        try
        {
            IEnumerable<HotelRoomDTO> hotelRooms = await HotelRoomRepository.GetAllHotelRooms();
            foreach(var hotelRoom in hotelRooms)
            {
                await HotelRoomRepository.DeleteHotelRoom(hotelRoom.HotelRoomId);
            }
            await SuccessPress("All hotel rooms deleted.");
        }catch(Exception ex)
        {
            throw new Exception(ex.ToString());
        }
    }

    private async Task DropHotelRoomImageTable()
    {
        try
        {
            IEnumerable<HotelRoomImageDTO> hotelRoomImages = await HotelRoomImageRepository.GetAllHotelRoomImages();
            foreach(var hotelRoomImage in hotelRoomImages)
            {
                var imageName = hotelRoomImage.ImageUrl.Replace($"RoomImages/", "");
                await HotelRoomImageRepository.DeleteImageById(hotelRoomImage.Id);
                var result = FileUpload.DeleteFile(imageName);
            }
            await SuccessPress("All hotel room images deleted.");
        }catch(Exception ex)
        {
            throw new Exception(ex.ToString());
        }
    }

}
